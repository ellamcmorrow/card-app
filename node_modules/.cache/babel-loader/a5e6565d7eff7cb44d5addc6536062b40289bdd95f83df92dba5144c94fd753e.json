{"ast":null,"code":"import _objectSpread from \"/Users/emcmorro/Desktop/2023/October/card-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { mergeProps as $cE0pI$mergeProps, filterDOMProps as $cE0pI$filterDOMProps, chain as $cE0pI$chain } from \"@react-aria/utils\";\nimport { useFocusable as $cE0pI$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $cE0pI$usePress } from \"@react-aria/interactions\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n\nfunction $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {\n  var _props$elementType = props.elementType,\n    elementType = _props$elementType === void 0 ? \"button\" : _props$elementType,\n    isDisabled = props.isDisabled,\n    onPress = props.onPress,\n    onPressStart = props.onPressStart,\n    onPressEnd = props.onPressEnd,\n    onPressChange = props.onPressChange,\n    // @ts-ignore - undocumented\n    preventFocusOnPress = props.preventFocusOnPress,\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled = props.allowFocusWhenDisabled,\n    deprecatedOnClick = props.onClick,\n    href = props.href,\n    target = props.target,\n    rel = props.rel,\n    _props$type = props.type,\n    type = _props$type === void 0 ? \"button\" : _props$type;\n  var additionalProps;\n  if (elementType === \"button\") additionalProps = {\n    type: type,\n    disabled: isDisabled\n  };else additionalProps = {\n    role: \"button\",\n    tabIndex: isDisabled ? undefined : 0,\n    href: elementType === \"a\" && isDisabled ? undefined : href,\n    target: elementType === \"a\" ? target : undefined,\n    type: elementType === \"input\" ? type : undefined,\n    disabled: elementType === \"input\" ? isDisabled : undefined,\n    \"aria-disabled\": !isDisabled || elementType === \"input\" ? undefined : isDisabled,\n    rel: elementType === \"a\" ? rel : undefined\n  };\n  var _ref = (0, $cE0pI$usePress)({\n      onPressStart: onPressStart,\n      onPressEnd: onPressEnd,\n      onPressChange: onPressChange,\n      onPress: onPress,\n      isDisabled: isDisabled,\n      preventFocusOnPress: preventFocusOnPress,\n      ref: ref\n    }),\n    pressProps = _ref.pressProps,\n    isPressed = _ref.isPressed;\n  var _ref2 = (0, $cE0pI$useFocusable)(props, ref),\n    focusableProps = _ref2.focusableProps;\n  if (allowFocusWhenDisabled) focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  var buttonProps = (0, $cE0pI$mergeProps)(focusableProps, pressProps, (0, $cE0pI$filterDOMProps)(props, {\n    labelable: true\n  }));\n  return {\n    isPressed: isPressed,\n    buttonProps: (0, $cE0pI$mergeProps)(additionalProps, buttonProps, {\n      \"aria-haspopup\": props[\"aria-haspopup\"],\n      \"aria-expanded\": props[\"aria-expanded\"],\n      \"aria-controls\": props[\"aria-controls\"],\n      \"aria-pressed\": props[\"aria-pressed\"],\n      onClick: function onClick(e) {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn(\"onClick is deprecated, please use onPress\");\n        }\n      }\n    })\n  };\n}\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $55f54f7887471b58$export$51e84d46ca0bc451(props, state, ref) {\n  var isSelected = state.isSelected;\n  var _ref3 = (0, $701a24aa0da5b062$export$ea18c227d4417cc3)(_objectSpread(_objectSpread({}, props), {}, {\n      onPress: (0, $cE0pI$chain)(state.toggle, props.onPress)\n    }), ref),\n    isPressed = _ref3.isPressed,\n    buttonProps = _ref3.buttonProps;\n  return {\n    isPressed: isPressed,\n    buttonProps: (0, $cE0pI$mergeProps)(buttonProps, {\n      \"aria-pressed\": isSelected\n    })\n  };\n}\nexport { $701a24aa0da5b062$export$ea18c227d4417cc3 as useButton, $55f54f7887471b58$export$51e84d46ca0bc451 as useToggleButton };","map":{"version":3,"names":["$701a24aa0da5b062$export$ea18c227d4417cc3","props","ref","_props$elementType","elementType","isDisabled","onPress","onPressStart","onPressEnd","onPressChange","preventFocusOnPress","allowFocusWhenDisabled","deprecatedOnClick","onClick","href","target","rel","_props$type","type","additionalProps","disabled","role","tabIndex","undefined","_ref","$cE0pI$usePress","pressProps","isPressed","_ref2","$cE0pI$useFocusable","focusableProps","buttonProps","$cE0pI$mergeProps","$cE0pI$filterDOMProps","labelable","e","console","warn","$55f54f7887471b58$export$51e84d46ca0bc451","state","isSelected","_ref3","_objectSpread","$cE0pI$chain","toggle"],"sources":["/Users/emcmorro/Desktop/2023/October/card-app/node_modules/@react-aria/button/dist/packages/@react-aria/button/src/index.ts","/Users/emcmorro/Desktop/2023/October/card-app/node_modules/@react-aria/button/dist/packages/@react-aria/button/src/useButton.ts","/Users/emcmorro/Desktop/2023/October/card-app/node_modules/@react-aria/button/dist/packages/@react-aria/button/src/useToggleButton.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport {useButton} from './useButton';\nexport {useToggleButton} from './useToggleButton';\nexport type {AriaButtonOptions, ButtonAria} from './useButton';\nexport type {AriaButtonProps, AriaToggleButtonProps} from '@react-types/button';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaButtonProps} from '@react-types/button';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface AriaButtonOptions<E extends ElementType> extends Omit<AriaButtonProps<E>, 'children'> {}\n\nexport interface ButtonAria<T> {\n  /** Props for the button element. */\n  buttonProps: T,\n  /** Whether the button is currently pressed. */\n  isPressed: boolean\n}\n\n// Order with overrides is important: 'button' should be default\nexport function useButton(props: AriaButtonOptions<'button'>, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useButton(props: AriaButtonOptions<'a'>, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useButton(props: AriaButtonOptions<'div'>, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useButton(props: AriaButtonOptions<'input'>, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useButton(props: AriaButtonOptions<'span'>, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useButton(props: AriaButtonOptions<ElementType>, ref: RefObject<Element>): ButtonAria<DOMAttributes>;\n/**\n * Provides the behavior and accessibility implementation for a button component. Handles mouse, keyboard, and touch interactions,\n * focus behavior, and ARIA props for both native button elements and custom element types.\n * @param props - Props to be applied to the button.\n * @param ref - A ref to a DOM element for the button.\n */\nexport function useButton(props: AriaButtonOptions<ElementType>, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  let {\n    elementType = 'button',\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    // @ts-ignore - undocumented\n    preventFocusOnPress,\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href,\n    target,\n    rel,\n    type = 'button'\n  } = props;\n  let additionalProps;\n  if (elementType === 'button') {\n    additionalProps = {\n      type,\n      disabled: isDisabled\n    };\n  } else {\n    additionalProps = {\n      role: 'button',\n      tabIndex: isDisabled ? undefined : 0,\n      href: elementType === 'a' && isDisabled ? undefined : href,\n      target: elementType === 'a' ? target : undefined,\n      type: elementType === 'input' ? type : undefined,\n      disabled: elementType === 'input' ? isDisabled : undefined,\n      'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n      rel: elementType === 'a' ? rel : undefined\n    };\n  }\n\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    isDisabled,\n    preventFocusOnPress,\n    ref\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  if (allowFocusWhenDisabled) {\n    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  }\n  let buttonProps = mergeProps(focusableProps, pressProps, filterDOMProps(props, {labelable: true}));\n\n  return {\n    isPressed, // Used to indicate press state for visual\n    buttonProps: mergeProps(additionalProps, buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      onClick: (e) => {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaToggleButtonProps} from '@react-types/button';\nimport {ButtonAria, useButton} from './useButton';\nimport {chain, mergeProps} from '@react-aria/utils';\nimport {DOMAttributes} from '@react-types/shared';\nimport {ToggleState} from '@react-stately/toggle';\n\nexport interface AriaToggleButtonOptions<E extends ElementType> extends Omit<AriaToggleButtonProps<E>, 'children'> {}\n\n// Order with overrides is important: 'button' should be default\nexport function useToggleButton(props: AriaToggleButtonOptions<'button'>, state: ToggleState, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useToggleButton(props: AriaToggleButtonOptions<'a'>, state: ToggleState, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useToggleButton(props: AriaToggleButtonOptions<'div'>, state: ToggleState, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useToggleButton(props: AriaToggleButtonOptions<'input'>, state: ToggleState, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useToggleButton(props: AriaToggleButtonOptions<'span'>, state: ToggleState, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useToggleButton(props: AriaToggleButtonOptions<ElementType>, state: ToggleState, ref: RefObject<Element>): ButtonAria<DOMAttributes>;\n/**\n * Provides the behavior and accessibility implementation for a toggle button component.\n * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.\n */\nexport function useToggleButton(props: AriaToggleButtonOptions<ElementType>, state: ToggleState, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  const {isSelected} = state;\n  const {isPressed, buttonProps} = useButton({\n    ...props,\n    onPress: chain(state.toggle, props.onPress)\n  }, ref);\n\n  return {\n    isPressed,\n    buttonProps: mergeProps(buttonProps, {\n      'aria-pressed': isSelected\n    })\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}