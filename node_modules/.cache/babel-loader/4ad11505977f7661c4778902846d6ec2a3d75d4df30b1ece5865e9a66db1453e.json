{"ast":null,"code":"var _jsxFileName = \"/Users/emcmorro/Desktop/2023/October/card-app/src/components/Button/Button.component.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { useButton } from \"@react-aria/button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// useButton doesn't support callback refs. This is why we use buttonRef instead\n// of forward ref API to provide a way for a ref to be set (we can type it to\n// something that useButton will accept.)\nconst _Button = ({\n  buttonRef,\n  children,\n  className,\n  ...unhandledProps\n}) => {\n  _s();\n  //TODO Fix type errors\n  const internalRef = useRef();\n  const ref = buttonRef || internalRef;\n  const {\n    buttonProps\n  } = useButton({\n    ...unhandledProps\n  },\n  //@ts-ignore\n  ref);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: className\n    //@ts-ignore\n    ,\n    ref: ref,\n    ...buttonProps,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(_Button, \"su8hY2bURHAgc3n9abtqZxBXhHg=\", false, function () {\n  return [useButton];\n});\nconst fillWidthStyles = css`\n  width: 100%;\n`;\nexport const Button = styled(_Button)`\n  ${({\n  fullWidth\n}) => css`\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: ${theme.spacingXs};\n    background-color: ${theme.darkPink};\n    border: ${theme.spacingXs};\n    color: ${theme.white};\n    padding: ${theme.spacingS};\n    text-align: center;\n    min-height: 48px;\n    width: 50%;\n    font-weight: ${theme.fontWeightBold};\n    font-size: ${props => props.theme.fontSizeBase};\n    \n    ${fullWidth && fillWidthStyles}\n  `}\n`;","map":{"version":3,"names":["React","useRef","styled","css","useButton","jsxDEV","_jsxDEV","_Button","buttonRef","children","className","unhandledProps","_s","internalRef","ref","buttonProps","fileName","_jsxFileName","lineNumber","columnNumber","fillWidthStyles","Button","fullWidth","theme","spacingXs","darkPink","white","spacingS","fontWeightBold","props","fontSizeBase"],"sources":["/Users/emcmorro/Desktop/2023/October/card-app/src/components/Button/Button.component.tsx"],"sourcesContent":["import React, { FC, useRef } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { useButton } from \"@react-aria/button\";\nimport { AriaButtonProps } from \"@react-types/button\";\nimport { PressEvent } from \"@react-types/shared\";\n\nexport interface ButtonProps\n  extends Omit<React.ComponentProps<\"button\">, \"ref\"> {\n  onPress?: (e: PressEvent) => void;\n  /**\n   * Class name applied to the native button element.\n   */\n  className?: string;\n  /**\n   * Ref that is bound to the underlying button element.\n   */\n  buttonRef?: React.MutableRefObject<HTMLButtonElement> | undefined;\n  /**\n   * Class name applied to the native button element.\n   */\n  fullWidth?: boolean;\n}\n\n// useButton doesn't support callback refs. This is why we use buttonRef instead\n// of forward ref API to provide a way for a ref to be set (we can type it to\n// something that useButton will accept.)\nconst _Button: FC<ButtonProps & AriaButtonProps> = ({\n  buttonRef,\n  children,\n  className,\n  ...unhandledProps\n}) => {\n  //TODO Fix type errors\n  const internalRef = useRef();\n  const ref = buttonRef || internalRef;\n  const { buttonProps } = useButton(\n    { ...unhandledProps },\n    //@ts-ignore\n    ref\n  );\n\n  return (\n    <button\n      className={className}\n      //@ts-ignore\n      ref={ref}\n      {...buttonProps}\n    >\n      <span>{children}</span>\n    </button>\n  );\n};\nconst fillWidthStyles = css`\n  width: 100%;\n`;\n\nexport const Button = styled(_Button)`\n  ${({ fullWidth }) => css`\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: ${theme.spacingXs};\n    background-color: ${theme.darkPink};\n    border: ${theme.spacingXs};\n    color: ${theme.white};\n    padding: ${theme.spacingS};\n    text-align: center;\n    min-height: 48px;\n    width: 50%;\n    font-weight: ${theme.fontWeightBold};\n    font-size: ${(props) => props.theme.fontSizeBase};\n    \n    ${fullWidth && fillWidthStyles}\n  `}\n`;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAQC,MAAM,QAAQ,OAAO;AACzC,OAAOC,MAAM,IAAIC,GAAG,QAAQ,mBAAmB;AAC/C,SAASC,SAAS,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAqB/C;AACA;AACA;AACA,MAAMC,OAA0C,GAAGA,CAAC;EAClDC,SAAS;EACTC,QAAQ;EACRC,SAAS;EACT,GAAGC;AACL,CAAC,KAAK;EAAAC,EAAA;EACJ;EACA,MAAMC,WAAW,GAAGZ,MAAM,CAAC,CAAC;EAC5B,MAAMa,GAAG,GAAGN,SAAS,IAAIK,WAAW;EACpC,MAAM;IAAEE;EAAY,CAAC,GAAGX,SAAS,CAC/B;IAAE,GAAGO;EAAe,CAAC;EACrB;EACAG,GACF,CAAC;EAED,oBACER,OAAA;IACEI,SAAS,EAAEA;IACX;IAAA;IACAI,GAAG,EAAEA,GAAI;IAAA,GACLC,WAAW;IAAAN,QAAA,eAEfH,OAAA;MAAAG,QAAA,EAAOA;IAAQ;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjB,CAAC;AAEb,CAAC;AAACP,EAAA,CAzBIL,OAA0C;EAAA,QAStBH,SAAS;AAAA;AAiBnC,MAAMgB,eAAe,GAAGjB,GAAI;AAC5B;AACA,CAAC;AAED,OAAO,MAAMkB,MAAM,GAAGnB,MAAM,CAACK,OAAO,CAAE;AACtC,IAAI,CAAC;EAAEe;AAAU,CAAC,KAAKnB,GAAI;AAC3B;AACA;AACA;AACA,qBAAqBoB,KAAK,CAACC,SAAU;AACrC,wBAAwBD,KAAK,CAACE,QAAS;AACvC,cAAcF,KAAK,CAACC,SAAU;AAC9B,aAAaD,KAAK,CAACG,KAAM;AACzB,eAAeH,KAAK,CAACI,QAAS;AAC9B;AACA;AACA;AACA,mBAAmBJ,KAAK,CAACK,cAAe;AACxC,iBAAkBC,KAAK,IAAKA,KAAK,CAACN,KAAK,CAACO,YAAa;AACrD;AACA,MAAMR,SAAS,IAAIF,eAAgB;AACnC,GAAI;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}