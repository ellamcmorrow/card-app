{"ast":null,"code":"var _jsxFileName = \"/Users/emcmorro/Desktop/2023/October/card-app/src/components/Button/Button.component.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { useButton } from \"@react-aria/button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IconLeftWrapper = styled.span`\n  display: inline-flex;\n  align-items: center;\n  margin: 0 4px 0 0;\n`;\nconst IconRightWrapper = styled.span`\n  display: inline-flex;\n  align-items: center;\n  margin: 0 0 0 4px;\n`;\n\n// useButton doesn't support callback refs. This is why we use buttonRef instead\n// of forward ref API to provide a way for a ref to be set (we can type it to\n// something that useButton will accept.)\nconst _Button = ({\n  buttonRef,\n  children,\n  className,\n  ...unhandledProps\n}) => {\n  _s();\n  //TODO Fix type errors\n  const internalRef = useRef();\n  const ref = buttonRef || internalRef;\n  const {\n    buttonProps\n  } = useButton({\n    ...unhandledProps\n  },\n  //@ts-ignore\n  ref);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: className\n    //@ts-ignore\n    ,\n    ref: ref,\n    ...buttonProps,\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(_Button, \"su8hY2bURHAgc3n9abtqZxBXhHg=\", false, function () {\n  return [useButton];\n});\nexport const Button = styled(_Button)`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: ${props => props.theme.spacingXs};\n  background-color: ${props => props.theme.pink};\n  color: ${props => props.theme.white};\n  padding: ${props => props.theme.spacingS};\n  text-align: center;\n  min-height: 48px;\n  width: 50%;\n  font-weight: ${props => props.theme.fontW};\n`;","map":{"version":3,"names":["React","useRef","styled","useButton","jsxDEV","_jsxDEV","IconLeftWrapper","span","IconRightWrapper","_Button","buttonRef","children","className","unhandledProps","_s","internalRef","ref","buttonProps","fileName","_jsxFileName","lineNumber","columnNumber","Button","props","theme","spacingXs","pink","white","spacingS","fontW"],"sources":["/Users/emcmorro/Desktop/2023/October/card-app/src/components/Button/Button.component.tsx"],"sourcesContent":["import React, { FC, useRef } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { useButton } from \"@react-aria/button\";\nimport { AriaButtonProps } from \"@react-types/button\";\nimport { PressEvent } from \"@react-types/shared\";\n\nexport interface ButtonProps\n  extends Omit<React.ComponentProps<\"button\">, \"ref\"> {\n  onPress?: (e: PressEvent) => void;\n  /**\n   * Class name applied to the native button element.\n   */\n  className?: string;\n  /**\n   * Ref that is bound to the underlying button element.\n   */\n  buttonRef?: React.MutableRefObject<HTMLButtonElement> | undefined;\n}\n\nconst IconLeftWrapper = styled.span`\n  display: inline-flex;\n  align-items: center;\n  margin: 0 4px 0 0;\n`;\n\nconst IconRightWrapper = styled.span`\n  display: inline-flex;\n  align-items: center;\n  margin: 0 0 0 4px;\n`;\n\n// useButton doesn't support callback refs. This is why we use buttonRef instead\n// of forward ref API to provide a way for a ref to be set (we can type it to\n// something that useButton will accept.)\nconst _Button: FC<ButtonProps & AriaButtonProps> = ({\n  buttonRef,\n  children,\n  className,\n  ...unhandledProps\n}) => {\n  //TODO Fix type errors\n  const internalRef = useRef();\n  const ref = buttonRef || internalRef;\n  const { buttonProps } = useButton(\n    { ...unhandledProps },\n    //@ts-ignore\n    ref\n  );\n\n  return (\n    <button\n      className={className}\n      //@ts-ignore\n      ref={ref}\n      {...buttonProps}\n    >\n      <span>{children}</span>\n    </button>\n  );\n};\n\nexport const Button = styled(_Button)`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: ${(props) => props.theme.spacingXs};\n  background-color: ${(props) => props.theme.pink};\n  color: ${(props) => props.theme.white};\n  padding: ${(props) => props.theme.spacingS};\n  text-align: center;\n  min-height: 48px;\n  width: 50%;\n  font-weight: ${(props) => props.theme.fontW};\n`;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAQC,MAAM,QAAQ,OAAO;AACzC,OAAOC,MAAM,MAAe,mBAAmB;AAC/C,SAASC,SAAS,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAiB/C,MAAMC,eAAe,GAAGJ,MAAM,CAACK,IAAK;AACpC;AACA;AACA;AACA,CAAC;AAED,MAAMC,gBAAgB,GAAGN,MAAM,CAACK,IAAK;AACrC;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,MAAME,OAA0C,GAAGA,CAAC;EAClDC,SAAS;EACTC,QAAQ;EACRC,SAAS;EACT,GAAGC;AACL,CAAC,KAAK;EAAAC,EAAA;EACJ;EACA,MAAMC,WAAW,GAAGd,MAAM,CAAC,CAAC;EAC5B,MAAMe,GAAG,GAAGN,SAAS,IAAIK,WAAW;EACpC,MAAM;IAAEE;EAAY,CAAC,GAAGd,SAAS,CAC/B;IAAE,GAAGU;EAAe,CAAC;EACrB;EACAG,GACF,CAAC;EAED,oBACEX,OAAA;IACEO,SAAS,EAAEA;IACX;IAAA;IACAI,GAAG,EAAEA,GAAI;IAAA,GACLC,WAAW;IAAAN,QAAA,eAEfN,OAAA;MAAAM,QAAA,EAAOA;IAAQ;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjB,CAAC;AAEb,CAAC;AAACP,EAAA,CAzBIL,OAA0C;EAAA,QAStBN,SAAS;AAAA;AAkBnC,OAAO,MAAMmB,MAAM,GAAGpB,MAAM,CAACO,OAAO,CAAE;AACtC;AACA;AACA;AACA,mBAAoBc,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACC,SAAU;AACpD,sBAAuBF,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACE,IAAK;AAClD,WAAYH,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACG,KAAM;AACxC,aAAcJ,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACI,QAAS;AAC7C;AACA;AACA;AACA,iBAAkBL,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACK,KAAM;AAC9C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}